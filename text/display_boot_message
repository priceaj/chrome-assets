#!/bin/sh
# Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Converts and displays UTF-8 based text message file from
# /usr/share/chromeos-assets/text/boot_messages/$locale/$message.txt .
# Uses pango-view to convert from txt to png, then ply-image to render png on
# frame buffer.

# Default conversion parameters (can be overridden by environment variables)
# Note pango-view and ply-image uses different color code format (#rrggbb vs
# 0xrrggbb), so we use format 'rrggbb' in IMAGE_BACKGROUND_RGB and not
# allowing common names.
: ${IMAGE_BACKGROUND_RGB:=fefefe}
: ${IMAGE_FONT_NAME:=sans-serif}
: ${IMAGE_FONT_SIZE:=22}
: ${IMAGE_MARGIN_SIZE:=5}
: ${IMAGE_TEXT_COLOR:=Black}
: ${MESSAGE_BASE_PATH:=/usr/share/chromeos-assets/text/boot_messages}
: ${ASSETS_IMAGE_PATH:=/usr/share/chromeos-assets/images}
: ${SPINNER_IMAGE_BASE:=/usr/share/chromeos-assets/images/spinner/48x48}
: ${SPINNER_INTERVAL:=100}

create_temp_output() {
  # File extension (.png) is required for render engine (pango-view) to decide
  # output format.
  mktemp --suffix .png
}

# Prints width of given PNG file.
get_png_width() {
  local input="$1"
  local width
  # Get image width (the 17~20 bytes of PNG file in big-endian).
  width="$(dd if="$input" bs=1 count=4 skip=16 2>/dev/null | od -A n -t x1)"
  echo "$(( 0x$(echo "$width" | sed 's/ //g') ))"
}

# Converts a text file to PNG file by pango-view without further postprocessing.
txt_to_png() {
  local input="$1"
  local output="$2"
  local locale="$3"
  local option="$4"
  pango-view -q --output="$output" \
    --dpi=72 --align=left --hinting=full \
    --margin="$IMAGE_MARGIN_SIZE"\
    --font="$IMAGE_FONT_NAME $IMAGE_FONT_SIZE" \
    --foreground="$IMAGE_TEXT_COLOR" \
    --background="#$IMAGE_BACKGROUND_RGB" \
    --language="$locale" \
    $option "$input"
}

# Converts a message file to PNG format to fit into given size.
message_to_png() {
  local input="$1"
  local output="$2"
  local locale="$3"
  local max_size_file="$4"
  local extra_options="$5"

  txt_to_png "$input" "$output" "$locale" "$extra_options"

  # We prefer a "left-aligned text image on center of screen, with text
  # wrapped by margin of its background image (max_size_file)". However if a
  # --width is assigned to pango-view, it will always pad (by text align
  # direction) to specified width, even if the image is smaller. That creates an
  # image which is always aligned to left of background, not on center. To fix
  # that, we first create the file, compare the width, and assign --width only
  # if we need wrapping.
  if [ -f "$max_size_file" ]; then
    local max_width="$(get_png_width "$max_size_file")"
    local width="$(get_png_width "$output")"
    if [ "$max_width" -gt 0 -a "$width" -gt "$max_width" ]; then
      extra_options="$extra_options --width=$max_width"
      txt_to_png "$input" "$output" "$locale" "$extra_options"
    fi
  fi
}

# Returns if given message needs spinner animation.
need_spinner() {
  local message="$1"

  case "$message" in
    enter_dev2 | leave_dev | self_repair | update_firmware | power_wash | \
      show_spinner | wipe)
      return 0
      ;;
    * )
      # Default: don't show spinner for unknown messages
      return 1
  esac
}

# Renders given images to screen.
render_images() {
  local rc=0
  local message="$1"
  local file="$2"
  local spiner_offset=""
  local spinner_file="$SPINNER_IMAGE_BASE"*01.png

  # Keep a copy of file in temp folder and never delete so it won't be removed
  # before the renderer (frecon or ply-image, running in background) is ready.
  # This is required for factory wiping that file lives on stateful partition.
  # It will be removed only when system reboots.
  local image_file="$(create_temp_output)"
  cp -f "$file" "$image_file"

  # Put spinner in left of centered message file, with a padding of 1/2 spinner
  # image width (offset is calculated from the default location, which puts
  # spinner in center).
  local spinner_offset_x=-"$(( $(get_png_width "${image_file}") / 2 +
                               $(get_png_width ${spinner_file}) ))"

  if [ -x /sbin/frecon ]; then
    # Stop any running frecon instance.
    pkill -9 frecon || true

    # By default frecon would exit after all images are displayed unless there
    # is --loop-start or --dev-mode. Most boot-time messages need to keep the
    # display until reboot so we want to always add --dev-mode.

    local params="--dev-mode \
      --clear 0x${IMAGE_BACKGROUND_RGB} \
      --frame-interval 0 \
      ${ASSETS_IMAGE_PATH}/boot_message.png \
      ${image_file}"

    # Frecon requires all options specified before image files.
    if need_spinner "${message}"; then
      params="\
        --loop-offset ${spinner_offset_x},0 \
        --loop-interval ${SPINNER_INTERVAL} \
        --loop-start 2 \
        ${params} \
        ${SPINNER_IMAGE_BASE}*.png"
    fi

    frecon ${params} &
  else
    ply-image --clear 0x"$IMAGE_BACKGROUND_RGB" \
      "$ASSETS_IMAGE_PATH/boot_message.png"
    ply-image "$image_file" || rc=$?
    if need_spinner "${message}"; then
      while initctl status startup 2>&1 | grep -q "/running"; do
        ply-image \
          --offset "${spinner_offset_x},0" \
          --frame-interval "${SPINNER_INTERVAL}" \
          "${SPINNER_IMAGE_BASE}"*.png
      done &
    fi
  fi
  return $rc
}

# Shows an arbitrary text file.
show_text_file() {
  local message="$1"
  local locale="$2"
  local file="$3"
  local options="$4"
  local rc

  # Some systems run the rendering in background (for example, frecon) and we
  # don't know when the file will be accessed; so keep the file undeleted until
  # next boot.
  local output="$(create_temp_output)"
  message_to_png "$file" "$output" "$locale" \
    "$ASSETS_IMAGE_PATH/boot_message.png" "$options" &&
  render_images "$message" "$output" || rc=$?
  rm -f "$output"
  return $rc
}

# Shows a predefined and localized message from $MESSAGE_BASE_PATH.
show_message() {
  local message="$1"
  local locales="$2"
  local rc=0
  local locale file

  for locale in $locales; do
    file="$MESSAGE_BASE_PATH/$locale/$message.txt"
    [ -f "$file" ] || continue
    show_text_file "$message" "$locale" "$file" "" || rc=$?
    return $rc
  done
  # If none of given locales have this message, return as failure.
  return 1
}

# Shows a PNG image file or text markup file.
show_file() {
  local message="$1"
  local file="$2"

  case "$file" in
    *.png)
      render_images "$message" "$file"
      ;;

    *)
      show_text_file "$message" "" "$file" "--markup"
      ;;
  esac
}

main() {
  if [ "$#" != "2" ]; then
    echo "Usage: $0 [MESSAGE LOCALES | show_file FILE | show_spinner FILE]" >&2
    exit 1
  fi

  case "$1" in
    show_file | show_spinner)
      show_file "$1" "$2"
      ;;
    * )
      show_message "$1" "$2"
      ;;
  esac
}

set -e
main "$@"
