#!/bin/sh
# Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Converts and displays UTF-8 based text message file from
# /usr/share/chromeos-assets/text/boot_messages/$locale/$message.txt .
# Uses pango-view to convert from txt to png, then ply-image to render png on
# frame buffer.

# Default conversion parameters (can be overridden by environment variables)
# Note pango-view and ply-image uses different color code format (#rrggbb vs
# 0xrrggbb), so we use format 'rrggbb' in IMAGE_BACKGROUND_RGB and not
# allowing common names.
: ${IMAGE_BACKGROUND_RGB:=fefefe}
: ${IMAGE_FONT_NAME:=sans-serif}
: ${IMAGE_FONT_SIZE:=22}
: ${IMAGE_MARGIN_SIZE:=5}
: ${IMAGE_TEXT_COLOR:=Black}
: ${MESSAGE_BASE_PATH:=/usr/share/chromeos-assets/text/boot_messages}
: ${ASSETS_IMAGE_PATH:=/usr/share/chromeos-assets/images}
: ${SPINNER_IMAGE_BASE:=/usr/share/chromeos-assets/images/spinner/48x48}
: ${SPINNER_INTERVAL:=100}

TEMP_FILE=""

# Clean temporary file.
clean_temp() {
  if [ -n "$TEMP_FILE" ]; then
    rm -f "$TEMP_FILE"
    TEMP_FILE=""
  fi
}

# Prints width of given PNG file.
get_png_width() {
  local input="$1"
  local width
  # Get image width (the 17~20 bytes of PNG file in big-endian).
  width="$(dd if="$input" bs=1 count=4 skip=16 2>/dev/null | od -A n -t x1)"
  echo "$(( 0x$(echo "$width" | sed 's/ //g') ))"
}

# Converts a text file to PNG file by pango-view without further postprocessing.
txt_to_png() {
  local input="$1"
  local output="$2"
  local locale="$3"
  local option="$4"
  pango-view -q --output="$output" \
    --dpi=72 --align=left --hinting=full \
    --margin="$IMAGE_MARGIN_SIZE"\
    --font="$IMAGE_FONT_NAME $IMAGE_FONT_SIZE" \
    --foreground="$IMAGE_TEXT_COLOR" \
    --background="#$IMAGE_BACKGROUND_RGB" \
    --language="$locale" \
    $option "$input"
}

# Converts a message file to PNG format to fit into given size.
message_to_png() {
  local input="$1"
  local output="$2"
  local locale="$3"
  local max_size_file="$4"

  txt_to_png "$input" "$output" "$locale"

  # We prefer a "left-aligned text image on center of screen, with text
  # wrapped by margin of its background image (max_size_file)". However if a
  # --width is assigned to pango-view, it will always pad (by text align
  # direction) to specified width, even if the image is smaller. That creates an
  # image which is always aligned to left of background, not on center. To fix
  # that, we first create the file, compare the width, and assign --width only
  # if we need wrapping.
  if [ -f "$max_size_file" ]; then
    local max_width="$(get_png_width "$max_size_file")"
    local width="$(get_png_width "$output")"
    if [ "$max_width" -gt 0 -a "$width" -gt "$max_width" ]; then
      txt_to_png "$input" "$output" "$locale" "--width=$max_width"
    fi
  fi
}

# Returns if given message needs spinner animation.
need_spinner() {
  local message="$1"

  case "$message" in
    enter_dev2 | leave_dev | self_repair | update_firmware )
      return 0
      ;;
    * )
      # Default: don't show spinner for unknown messages
      return 1
  esac
}

# Shows spinner in left of given message image file, until end of startup stage.
show_spinner() {
  local message_file="$1"
  local control_file="$2"
  local spinner_file="$SPINNER_IMAGE_BASE"*01.png

  # Put spinner in left of centered message file, with a padding of 1/2 spinner
  # image width (offset is calculated from the default location, which puts
  # spinner in center).
  local spinner_offset_x=-"$(( $(get_png_width "$message_file") / 2 +
                               $(get_png_width $spinner_file) ))"

  while initctl status startup 2>&1 | grep -q "/running"; do
    ply-image \
      --offset "$spinner_offset_x,0" \
      --frame-interval "$SPINNER_INTERVAL" \
      "$SPINNER_IMAGE_BASE"*.png
  done &
}

# Shows an arbitrary text file.
show_file() {
  local file_type="$1"
  local locale="$2"
  local text_file="$3"
  local rc=0

  # File extension (.png) is required for render engine (pango-view) to decide
  # output format.
  TEMP_FILE="$(mktemp --tmpdir -u).png"
  message_to_png "$text_file" "$TEMP_FILE" "$locale" \
    "$ASSETS_IMAGE_PATH/boot_message.png"
  if [ -x /sbin/frecon ]; then
    # Stop any running frecon instance.
    pkill -9 frecon || true
    frecon --clear 0x"$IMAGE_BACKGROUND_RGB" --frame-interval 0 \
      "$ASSETS_IMAGE_PATH/boot_message.png" "$TEMP_FILE" &
    # We don't know when frecon will be ready to render the file, so keep it
    # until next boot.
    TEMP_FILE=""
    # No spinner available, sorry.
  else
    ply-image --clear 0x"$IMAGE_BACKGROUND_RGB" \
      "$ASSETS_IMAGE_PATH/boot_message.png"
    ply-image "$TEMP_FILE" || rc=$?
    need_spinner "$file_type" && show_spinner "$TEMP_FILE" || true
  fi
  return $rc
}

# Shows a predefined and localized message from $MESSAGE_BASE_PATH.
show_message() {
  local message="$1"
  local locales="$2"
  local rc=0
  local locale text_file

  for locale in $locales; do
    text_file="$MESSAGE_BASE_PATH/$locale/$message.txt"
    [ -f "$text_file" ] || continue
    show_file "$message" "$locale" "$text_file" || rc=$?
    return $rc
  done
  # If none of given locales have this message, return as failure.
  return 1
}

main() {
  local option text_file locale

  if [ "$#" != "2" ]; then
    echo "Usage: $0 [MESSAGE LOCALES | show_file FILE]" >&2
    exit 1
  fi

  case "$1" in
    show_file )
      show_file "$1" "en" "$2"
      ;;
    * )
      show_message "$1" "$2"
      ;;
  esac
}

set -e
trap clean_temp EXIT
main "$@"
